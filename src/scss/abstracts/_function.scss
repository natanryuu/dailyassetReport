@import "abstracts/variables";

@function vw($target) {
  // 1 vw is equal to 1% of the viewport width
  $vw-context: ($pcrwd-breakpoint * 0.01) * 1px; // 1% viewport width
  @return ($target/$vw-context) * 1vw;
}

@function vwm($target) {
  // 1 vw is equal to 1% of the viewport width
  $vw-context: ($mblrwd-breakpoint * 0.01) * 1px; // 1% viewport width
  @return ($target/$vw-context) * 1vw;
}

@function xy($xy, $ttlw) {
  @return ($xy / $ttlw * 100%);
}

@function px-em($px, $base: 16) {
  @return ($px / $base * 1em);
}

@function mapReverse($map) {
  $result: null;

  @if type-of($map) == "map" {
    $keys: map-keys($map);
    $map-reversed: ();

    @for $i from length($keys) through 1 {
      $map-reversed: map-merge(
        $map-reversed,
        (
          nth($keys, $i): map-get($map, nth($keys, $i)),
        )
      );
    }

    @if type-of($map-reversed) == "map" {
      $result: $map-reversed;
    } @else {
      @warn 'There was an error reversing the order of "#{$map}"';
    }
  } @else {
    @warn '"#{$map}" is not a valid map';
  }

  @return $result;
}

